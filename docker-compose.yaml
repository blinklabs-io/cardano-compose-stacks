version: "3.9"

services:
  cardano-node:
    container_name: cardano-node
    image: ghcr.io/blinklabs-io/cardano-node:8.1.2-5
    environment:
      - NETWORK=${NETWORK:-mainnet}
    volumes:
      - node-data:/data
      - node-ipc:/ipc
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f 127.0.0.1:12798/metrics || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5
    ports:
      - ${CARDANO_NODE_PORT:-3001}:3001
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
  
  # Currently doesn't have a release yet, so using main branch
  cardano-node-api:
    container_name: cardano-node-api
    image: ghcr.io/blinklabs-io/cardano-node-api:main
    environment:
      - CARDANO_NETWORK=${CARDANO_NETWORK:-mainnet}
      - CARDANO_NODE_SOCKET_PATH=/ipc/node.socket
    depends_on:
      cardano-node:
        condition: service_healthy
    volumes:
      - node-ipc:/ipc
    restart: on-failure
    ports:
      - ${API_LISTEN_PORT:-8080}:8080
      - ${METRICS_LISTEN_PORT:-8081}:8081
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  tx-submit-api:
    container_name: tx-submit-api
    image: ghcr.io/blinklabs-io/tx-submit-api:0.14.4
    environment:
      - NETWORK=${NETWORK:-mainnet}
      - CARDANO_NODE_SOCKET_PATH=/ipc/node.socket
    depends_on:
      cardano-node:
        condition: service_healthy
    volumes:
      - node-ipc:/ipc
    restart: on-failure
    ports:
      - ${TX_SUBMIT_API_PORT:-8090}:8090
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"


  cardano-db-sync:
    container_name: cardano-db-sync
    image: ghcr.io/blinklabs-io/cardano-db-sync:13.1.1.3
    environment:
      - DISABLE_LEDGER=${DISABLE_LEDGER}
      - NETWORK=${NETWORK:-mainnet}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - RESTORE_SNAPSHOT=${RESTORE_SNAPSHOT:-}
      - RESTORE_RECREATE_DB=N
      - EXTRA_DB_SYNC_ARGS=${EXTRA_DB_SYNC_ARGS:-}
    depends_on:
      # Depend on both services to be healthy before starting.
      cardano-node:
        condition: service_healthy
      postgres:
        condition: service_healthy
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    volumes:
      - db-sync-data:/var/lib/cexplorer
      - node-ipc:/node-ipc
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  postgres:
    container_name: postgres
    image: postgres:15.3-alpine3.18
    environment:
      - POSTGRES_LOGGING=true
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      # Use pg_isready to check postgres is running. Substitute different
      # user `postgres` if you've setup differently to config/pgpass-mainnet
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ${POSTGRES_ARGS:--c maintenance_work_mem=1GB -c max_parallel_maintenance_workers=4}
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

secrets:
  postgres_db:
    file: ./postgres-config/secrets/postgres_db
  postgres_password:
    file: ./postgres-config/secrets/postgres_password
  postgres_user:
    file: ./postgres-config/secrets/postgres_user

volumes:
  node-data:
  node-ipc:
  db-sync-data:
  postgres:
