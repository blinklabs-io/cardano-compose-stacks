version: "3.9"

services:
  cardano-node:
    container_name: cardano-node
    image: ghcr.io/blinklabs-io/cardano-node:${CARDANO_NODE_VERSION:-10.1.2}
    environment:
      - NETWORK=${NETWORK:-mainnet}
    volumes:
      - node-data:/data
      - node-ipc:/ipc
      - node-config:/opt/cardano/config
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f 127.0.0.1:12798/metrics || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5
    ports:
      - ${CARDANO_NODE_PORT:-3001}:3001
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    profiles:
      - kupmios
      - node
      - node-api
      - ogmios
      - tx-submit-api

  cardano-node-api:
    container_name: cardano-node-api
    image: ghcr.io/blinklabs-io/cardano-node-api:${CARDANO_NODE_API_VERSION:-0.4.1}
    environment:
      - CARDANO_NETWORK=${CARDANO_NETWORK:-mainnet}
      - CARDANO_NODE_SOCKET_PATH=/ipc/node.socket
    depends_on:
      cardano-node:
        condition: service_healthy
    volumes:
      - node-ipc:/ipc
    restart: on-failure
    ports:
      - ${CARDANO_NODE_API_API_LISTEN_PORT:-8080}:8080
      - ${CARDANO_NODE_API_GRPC_LISTEN_PORT:-9090}:9090
      - ${CARDANO_NODE_API_METRICS_LISTEN_PORT:-8081}:8081
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    profiles:
      - node-api

  bluefin:
    image: ghcr.io/blinklabs-io/bluefin:${BLUEFIN_VERSION:-0.13.0}
    container_name: bluefin
    environment:
      - NETWORK=${NETWORK:-mainnet}
      - PROFILE=${PROFILE:-tuna-v2}
      - MNEMONIC=${MNEMONIC}
      - SUBMIT_URL=${SUBMIT_URL}
    volumes:
      - bluefin-data:/data
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    restart: on-failure
    profiles:
      - bluefin
  
  bluefin-inspector:
    image: busybox
    container_name: bluefin-inspector
    command: ["sh", "-c", "while true; do sleep 3600; done"]
    volumes:
      - bluefin-data:/data
    restart: no
    profiles:
      - bluefin-inspector

  bursa:
    container_name: bursa
    image: ghcr.io/blinklabs-io/bursa:${BURSA_VERSION:-0.8.3}
    environment:
      - NETWORK=${CARDANO_NETWORK:-mainnet}
    restart: on-failure
    command: ["api"]
    ports:
      - ${BURSA_API_LISTEN_PORT:-8090}:8080
      - ${BURSA_METRICS_LISTEN_PORT:-8081}:8081
    profiles:
      - bursa
  
  kupo:
    container_name: kupo
    image: cardanosolutions/kupo:${KUPO_VERSION:-v2.9.0}
    environment:
      - NETWORK=${CARDANO_NETWORK:-mainnet}
      - CARDANO_NODE_SOCKET_PATH=/ipc/node.socket
    depends_on:
      cardano-node:
        condition: service_healthy
    volumes:
      - node-ipc:/ipc
      - kupo-db:/db
      - node-config:/config
    restart: on-failure
    command:
      - --node-socket
      - /ipc/node.socket
      - --host
      - 0.0.0.0
      - --port
      - '1442'
      - --log-level
      - Info
      - --node-config
      - /config/${NETWORK:-mainnet}/config.json
      - --match
      - '*'
      - --defer-db-indexes
      - --since
      - origin
      - --workdir
      - '/db'
    ports:
      - "1442:1442"
    profiles:
      - kupmios

  ogmios:
    container_name: ogmios
    image: cardanosolutions/ogmios:v${OGMIOS_VERSION:-6.9.0}
    environment:
      - NETWORK=${NETWORK:-mainnet}
      - CARDANO_NODE_SOCKET_PATH=/ipc/node.socket
    depends_on:
      cardano-node:
        condition: service_healthy
    volumes:
      - node-ipc:/ipc
      - node-config:/config
    restart: on-failure
    command: [
      "--log-level", "info",
      "--host", "0.0.0.0",
      "--port", "1337",
      "--node-socket", "/ipc/node.socket",
      "--node-config", "/config/${NETWORK:-mainnet}/config.json"
    ]
    ports:
      - ${OGMIOS_PORT:-1337}:1337
    healthcheck:
      test: ["CMD-SHELL", "nc -z 127.0.0.1 1337 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 15
      start_period: 60s
    profiles:
      - kupmios
      - ogmios

  tx-submit-api:
    container_name: tx-submit-api
    image: ghcr.io/blinklabs-io/tx-submit-api:${TX_SUBMIT_API_VERSION:-0.20.0}
    environment:
      - NETWORK=${CARDANO_NETWORK:-mainnet}
      - CARDANO_NODE_SOCKET_PATH=/ipc/node.socket
    depends_on:
      cardano-node:
        condition: service_healthy
    volumes:
      - node-ipc:/ipc
    restart: on-failure
    ports:
      - ${TX_SUBMIT_API_PORT:-8090}:8090
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    profiles:
      - tx-submit-api

  cardano-db-sync:
    container_name: cardano-db-sync
    image: ghcr.io/blinklabs-io/cardano-db-sync:${CARDANO_DB_SYNC_VERSION:-13.6.0.1}
    environment:
      - DISABLE_LEDGER=${DISABLE_LEDGER}
      - NETWORK=${NETWORK:-mainnet}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - RESTORE_SNAPSHOT=${RESTORE_SNAPSHOT:-}
      - RESTORE_RECREATE_DB=N
      - EXTRA_DB_SYNC_ARGS=${EXTRA_DB_SYNC_ARGS:-}
    depends_on:
      # Depend on both services to be healthy before starting.
      cardano-node:
        condition: service_healthy
      postgres:
        condition: service_healthy
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    volumes:
      - db-sync-data:/var/lib/cexplorer
      - node-ipc:/node-ipc
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    profiles:
      - db-sync

  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION:-15.3-alpine3.18}
    environment:
      - POSTGRES_LOGGING=true
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      # Use pg_isready to check postgres is running. Substitute different
      # user `postgres` if you've setup differently to config/pgpass-mainnet
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ${POSTGRES_ARGS:--c maintenance_work_mem=1GB -c max_parallel_maintenance_workers=4}
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    profiles:
      - db-sync

secrets:
  postgres_db:
    file: ./postgres-config/secrets/postgres_db
  postgres_password:
    file: ./postgres-config/secrets/postgres_password
  postgres_user:
    file: ./postgres-config/secrets/postgres_user

volumes:
  bluefin-data:
    driver: local
  db-sync-data:
  kupo-db:
  node-config:
  node-data:
  node-ipc:
  postgres:
